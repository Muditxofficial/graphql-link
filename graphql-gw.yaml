# Configure the host and port the service will listen on
listen: 0.0.0.0:8080

#
# Configure the GraphQL upstream servers you will be accessing
upstreams:
  anilist:
    url: https://graphql.anilist.co
    prefix: Ani
  pokemon:
    url: https://graphql-pokemon.now.sh
    prefix: Pokemon
  weather:
    type: openapi
    prefix: Weather
    spec:
      url: https://weather.com/swagger-docs/sun/v1/sunV1DailyForecast.json
    api:
      api-key: please configure me

types:
  - name: Query
    actions:
      # mounts the root anilist query to the anime field
      - type: mount
        field: anime
        upstream: anilist
        query: query {}

      # mounts the root pokemon query to the pokemon field
      - type: mount
        field: pokemon
        upstream: pokemon
        query: query {}

      - type: mount
        field: weather
        upstream: weather
        query: query {}

  - name: AniCharacter
    actions:
      # mounts the root anilist query to the anime field
      - type: link
        field: pokemon
        vars:
          $fullname: name { full }
        upstream: pokemon
        query: query { pokemon(name:$fullname) }
#
# The above link lets you do queries that access data from both the anilist and pokemon services. Example:
# query {
#  anime {
#    Character(search: "Pikachu") {
#      description
#      image {
#        medium
#      }
#      pokemon {
#        attacks {
#          special {
#            name
#            type
#            damage
#          }
#        }
#      }
#    }
#  }
#}

  - name: Mutation
    actions:
      # mounts all the fields of the root anilist mutation
      - type: mount
        upstream: anilist
        query: mutation {}
